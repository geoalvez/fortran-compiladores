
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 28 01:49:40 BRT 2011
//----------------------------------------------------

package compil.fortran;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 28 01:49:40 BRT 2011
  */
public class FortranCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public FortranCup() {super();}

  /** Constructor which sets the default scanner. */
  public FortranCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FortranCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\011\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\004\003\000\002\004\003\000\002" +
    "\005\003\000\002\005\003\000\002\006\003\000\002\006" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\010\003\000\002\010\004\000" +
    "\002\012\004\000\002\012\003\000\002\013\004\000\002" +
    "\014\003\000\002\014\004\000\002\015\003\000\002\015" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\017\003\000" +
    "\002\017\003\000\002\020\005\000\002\021\006\000\002" +
    "\021\005\000\002\022\005\000\002\023\006\000\002\023" +
    "\005\000\002\024\005\000\002\024\004\000\002\025\003" +
    "\000\002\025\004\000\002\026\003\000\002\030\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\004\000\004\004\005\001\002\000\004\002\006\001" +
    "\002\000\004\002\001\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\004\000\004\011\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FortranCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FortranCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FortranCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$FortranCup$actions {



  private final FortranCup parser;

  /** Constructor */
  CUP$FortranCup$actions(FortranCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$FortranCup$do_action(
    int                        CUP$FortranCup$act_num,
    java_cup.runtime.lr_parser CUP$FortranCup$parser,
    java.util.Stack            CUP$FortranCup$stack,
    int                        CUP$FortranCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FortranCup$result;

      /* select the action based on the action number */
      switch (CUP$FortranCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ProgramStmt ::= label PROGRAM ProgramName 
            {
              Object RESULT =null;
		System.out.println("ProgramStmt"); 
              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("ProgramStmt",22, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.elementAt(CUP$FortranCup$top-2)), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BlockDataBodyConstruct ::= SpecificationPartConstruct 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("BlockDataBodyConstruct",20, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BlockDataBody ::= BlockDataBody BlockDataBodyConstruct 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("BlockDataBody",19, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.elementAt(CUP$FortranCup$top-1)), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BlockDataBody ::= BlockDataBodyConstruct 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("BlockDataBody",19, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BlockDataSubprogram ::= BlockDataStmt EndStmt 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("BlockDataSubprogram",18, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.elementAt(CUP$FortranCup$top-1)), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BlockDataSubprogram ::= BlockDataStmt BlockDataBody EndStmt 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("BlockDataSubprogram",18, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.elementAt(CUP$FortranCup$top-2)), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SubroutineRange ::= SubroutineParList xEOS EndStmt 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("SubroutineRange",17, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.elementAt(CUP$FortranCup$top-2)), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SubroutineRange ::= SubroutineParList xEOS Body EndStmt 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("SubroutineRange",17, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.elementAt(CUP$FortranCup$top-3)), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SubroutineSubprogram ::= SUBROUTINE SubroutineName SubroutineRange 
            {
              Object RESULT =null;
		System.out.println("SubroutineSubprogram"); 
              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("SubroutineSubprogram",16, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.elementAt(CUP$FortranCup$top-2)), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FunctionRange ::= FunctionParList xEOS EndStmt 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("FunctionRange",15, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.elementAt(CUP$FortranCup$top-2)), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FunctionRange ::= FunctionParList xEOS Body EndStmt 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("FunctionRange",15, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.elementAt(CUP$FortranCup$top-3)), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FunctionSubprogram ::= FunctionPrefix FunctionName FunctionRange 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("FunctionSubprogram",14, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.elementAt(CUP$FortranCup$top-2)), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DeclarationConstruct ::= SpecificationStmt 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("DeclarationConstruct",13, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DeclarationConstruct ::= TypeDeclarationStmt 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("DeclarationConstruct",13, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SpecificationPartConstruct ::= DeclarationConstruct 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("SpecificationPartConstruct",12, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SpecificationPartConstruct ::= EntryStmt 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("SpecificationPartConstruct",12, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SpecificationPartConstruct ::= FormatStmt 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("SpecificationPartConstruct",12, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SpecificationPartConstruct ::= ParameterStmt 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("SpecificationPartConstruct",12, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SpecificationPartConstruct ::= ImplicitStmt 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("SpecificationPartConstruct",12, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BodyConstruct ::= ExecutableConstruct 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("BodyConstruct",11, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BodyConstruct ::= SpecificationPartConstruct 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("BodyConstruct",11, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Body ::= Body BodyConstruct 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("Body",10, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.elementAt(CUP$FortranCup$top-1)), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Body ::= BodyConstruct 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("Body",10, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EndStmt ::= label END 
            {
              Object RESULT =null;
		System.out.println("EndStmt"); 
              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("EndStmt",9, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.elementAt(CUP$FortranCup$top-1)), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MainRange ::= EndStmt 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("MainRange",8, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MainRange ::= Body EndStmt 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("MainRange",8, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.elementAt(CUP$FortranCup$top-1)), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MainProgram ::= ProgramStmt MainRange 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("MainProgram",6, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.elementAt(CUP$FortranCup$top-1)), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // MainProgram ::= MainRange 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("MainProgram",6, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ProgramUnit ::= BlockDataSubprogram 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("ProgramUnit",5, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ProgramUnit ::= SubroutineSubprogram 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("ProgramUnit",5, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ProgramUnit ::= FunctionSubprogram 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("ProgramUnit",5, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ProgramUnit ::= MainProgram 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("ProgramUnit",5, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // unaryOperator ::= NOT 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("unaryOperator",4, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // unaryOperator ::= MINUS 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("unaryOperator",4, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // multiplyOperator ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("multiplyOperator",3, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // multiplyOperator ::= MULTIPLY 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("multiplyOperator",3, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // addOperator ::= MINUS 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("addOperator",2, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // addOperator ::= PLUS 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("addOperator",2, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // relationalOperator ::= NE 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("relationalOperator",1, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // relationalOperator ::= GE 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("relationalOperator",1, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // relationalOperator ::= LE 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("relationalOperator",1, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // relationalOperator ::= GT 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("relationalOperator",1, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // relationalOperator ::= LT 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("relationalOperator",1, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // relationalOperator ::= EQ 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("relationalOperator",1, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // logicalOperator ::= OR 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("logicalOperator",0, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // logicalOperator ::= AND 
            {
              Object RESULT =null;

              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("logicalOperator",0, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= grammar EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$FortranCup$stack.elementAt(CUP$FortranCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$FortranCup$stack.elementAt(CUP$FortranCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$FortranCup$stack.elementAt(CUP$FortranCup$top-1)).value;
		RESULT = start_val;
              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.elementAt(CUP$FortranCup$top-1)), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$FortranCup$parser.done_parsing();
          return CUP$FortranCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // grammar ::= ANY 
            {
              Object RESULT =null;
		
				
              CUP$FortranCup$result = parser.getSymbolFactory().newSymbol("grammar",7, ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FortranCup$stack.peek()), RESULT);
            }
          return CUP$FortranCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

